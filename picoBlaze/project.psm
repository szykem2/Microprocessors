MEM "project.mem"                                      ; dump memory
lcd              DSIO       $30
lcd_control      DSIO       $31
int_status       DSIO       $E0
int_mask         DSIO       $E1
ps2_out          DSOUT      $70
ps2              DSIN       $70
ps2_int_edge     DSIO       $71
ps2_int_value    DSIO       $72
ps2_int_mask     DSIO       $73

EINT                                                   ; enable interrupt system

;global interrupts
LOAD    s0,      2                                     ; prepare interrupt for PS/2
OUT     s0,      int_mask                              ; enable intterupts

;local interrupts
LOAD    s0,      1                                     ; edge interrupt
OUT     s0,      ps2_int_edge                          ; set interrupting on edge
OUT     s0,      ps2_int_value                         ; set interrupting on increasing edge
LOAD    s0,      2                                     ; prepare interrupt mask for incoming data
OUT     s0,      ps2_int_mask                          ; enable interrupt for PS/2

;initialize display
LOAD    s0,      $38

OUT     s0,      lcd
CALL    handleE
CALL    delay5m


OUT     s0,      lcd
CALL    handleE
CALL    delay40u
CALL    delay40u
CALL    delay40u


OUT     s0,      lcd
CALL    handleE
CALL    delay40u


OUT     s0,      lcd
CALL    handleE
CALL    delay40u


LOAD    s0,      $06
OUT     s0,      lcd
CALL    handleE
CALL    delay40u


LOAD    s0,      $0e
OUT     s0,      lcd
CALL    handleE
CALL    delay40u


LOAD    s0,      $01
OUT     s0,      lcd
CALL    handleE
CALL    delay5m
CALL    fLine

et:
        JUMP     et
          


delay1m:
        LOAD     sF,      26
        

       
wait1m:
        CALL     delay40u
        SUB      sF,      1
        JUMP     NZ,      wait1m
        RET

delay5m:
        CALL     delay1m
        CALL     delay1m
        CALL     delay1m
        CALL     delay1m
        CALL     delay1m
        RET

delay1u:
        LOAD     sE,      24
       
wait1u:
        SUB      sE,      1
        JUMP     NZ,      wait1u
        LOAD     sE,      sE
        RET

delay40u:
        LOAD     sD,      36
        
wait40u:
        CALL     delay1u
        SUB      sD,      1
        JUMP     NZ,      wait40u
        RET
        
secLine:
        LOAD     s0,      $C0
        OUT      s0,      lcd
        CALL     handleE
        CALL     delay40u
        RET

fLine:
        LOAD     s0,      $80
        OUT      s0,      lcd
        LOAD     s4,      0
        CALL     handleE
        CALL     delay40u
        RET

handleE:
        LOAD     sE,      1
        OUT      sE,      lcd_control
        LOAD     sE,      0
        LOAD     s0,      s0
        OUT      sE,      lcd_control
        RET

handleERS:
        LOAD     sE,      3
        OUT      sE,      lcd_control
        LOAD     sE,      2
        LOAD     s0,      s0
        OUT      sE,      lcd_control
        RET

handleInt:
        RETI     ENABLE



ORG     $3FF
JUMP    handleInt
