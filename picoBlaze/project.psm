MEM "project.mem"                                      ; dump memory
; open ports
lcd              DSIO       $30
lcd_control      DSIO       $31
int_status       DSIO       $E0
int_mask         DSIO       $E1
ps2              DSIO       $70
ps2_int_edge     DSIO       $71
ps2_int_value    DSIO       $72
ps2_int_mask     DSIO       $73
led              DSIO       00

; rename registers
; registers sF, sE, sD are reserved for delays
shift            EQU        sC                         ; shift pressed
caps             EQU        sB                         ; caps lock
num              EQU        sA                         ; num lock
btn_rel          EQU        s9                         ; button released
int_cnt          EQU        s8                         ; interrupt counter
decoded          EQU        s7                         ; decoded value
cursor           EQU        s6                         ; cursor position
special          EQU        s5                         ; special character enter, home etc.

EINT                                                   ; enable interrupt system

LOAD    s0,      0
STORE   s0,      0
STORE   s0,      1
STORE   s0,      3

LOAD    s1,      1
OUT     s1,      led

; global interrupts
LOAD    s0,      2                                     ; prepare interrupt for PS/2
OUT     s0,      int_mask                              ; enable intterupts

; local interrupts
LOAD    s0,      3                                     ; native state of voltage line(high)
OUT     s0,      ps2
LOAD    s0,      1                                     ; edge interrupt for clock
OUT     s0,      ps2_int_edge                          ; set interrupting on edge
LOAD    s0,      0
OUT     s0,      ps2_int_value                         ; set interrupting on decreasing edge
LOAD    s0,      1                                     ; prepare interrupt mask for clock
OUT     s0,      ps2_int_mask                          ; enable interrupt for PS/2

; initialize display
LOAD    s0,      $38

OUT     s0,      lcd
CALL    handleE
CALL    delay5m

OUT     s0,      lcd
CALL    handleE
CALL    delay40u
CALL    delay40u
CALL    delay40u

OUT     s0,      lcd
CALL    handleE
CALL    delay40u

OUT     s0,      lcd
CALL    handleE
CALL    delay40u

LOAD    s0,      $06
OUT     s0,      lcd
CALL    handleE
CALL    delay40u

LOAD    s0,      $0e
OUT     s0,      lcd
CALL    handleE
CALL    delay40u

LOAD    s0,      $01
OUT     s0,      lcd
CALL    handleE
CALL    delay5m
CALL    fLine

LOAD s8, 0
LOAD sA, 0

et:
        JUMP     et

delay1m:
        LOAD     sF,      26

wait1m:
        CALL     delay40u
        SUB      sF,      1
        JUMP     NZ,      wait1m
        RET

delay5m:
        CALL     delay1m
        CALL     delay1m
        CALL     delay1m
        CALL     delay1m
        CALL     delay1m
        RET

delay1u:
        LOAD     sE,      24

wait1u:
        SUB      sE,      1
        JUMP     NZ,      wait1u
        LOAD     sE,      sE
        RET

delay40u:
        LOAD     sD,      36

wait40u:
        CALL     delay1u
        SUB      sD,      1
        JUMP     NZ,      wait40u
        RET

secLine:
        LOAD     s0,      $C0
        OUT      s0,      lcd
        CALL     handleE
        CALL     delay40u
        RET

fLine:
        LOAD     s0,      $80
        OUT      s0,      lcd
        LOAD     s4,      0
        CALL     handleE
        CALL     delay40u
        RET

handleE:
        LOAD     sE,      1
        OUT      sE,      lcd_control
        LOAD     sE,      0
        LOAD     s0,      s0
        OUT      sE,      lcd_control
        RET

handleERS:
        LOAD     sE,      3
        OUT      sE,      lcd_control
        LOAD     sE,      2
        LOAD     s0,      s0
        OUT      sE,      lcd_control
        RET

handleInt:
        ADD      int_cnt, 1
        COMP     int_cnt, 1
        JUMP     Z,       ed

        COMP     int_cnt, 10
        JUMP     Z,       ed

        COMP     int_cnt, 11
        JUMP     Z,       display
        
        IN       s1,      ps2
        SR0      s1
        COMP     s1,      1
        JUMP     NZ,      mov0
        SR1      decoded
        JUMP     ed
mov0:
        SR0      decoded
        JUMP     ed
display:
        COMP     btn_rel, 1
        JUMP     Z,       btnReleased
        COMP     decoded, $F0
        JUMP     Z,       released
        COMP     special, 1
        JUMP     Z,       handleSpecial
        COMP     decoded, $E0
        JUMP     Z,       specialKey
        COMP     decoded, $58
        JUMP     Z,       capsLock
        COMP     decoded, $66
        JUMP     Z,       backspace
        COMP     decoded, $12
        JUMP     Z,       pshift
        COMP     decoded, $59
        JUMP     Z,       pshift
        COMP     decoded, $5A
        JUMP     Z,       enter
        COMP     decoded, $76
        JUMP     Z,       escape
        COMP     decoded, $77
        JUMP     Z,       numlock
lcd_out:
        FETCH    s4,      decoded
        COMP     s4,      0
        JUMP     Z,       zero
        CALL     upperCase
        
        COMP     s4,      66
        JUMP     NZ,      llend
        LOAD     s3,      0
        STORE    s3,      3
        CALL     code
        JUMP     lend
        
        llend:
        COMP     s4,      67
        JUMP     NZ,      lend
        LOAD     s3,      1
        STORE    s3,      3
        CALL     code
        
        lend:
        COMP     cursor,  16
        CALL     z,       secLine
        COMP     cursor,  32
        CALL     z,       fLine
        OUT      s4,      led
        OUT      s4,      lcd
        CALL     handleERS
        CALL     delay40u
        ADD      cursor,  1
zero:
        LOAD     decoded, 0
        LOAD     int_cnt, 0
        JUMP     ed
specialKey:
        LOAD     special, 1
        JUMP     zero
handleSpecial:
        COMP     decoded, $5A
        JUMP     Z,       enter
        COMP     decoded, $69
        JUMP     Z,       pend
        COMP     decoded, $6C
        JUMP     Z,       home
        COMP     decoded, $71
        JUMP     Z,       delete
        COMP     decoded, $74
        JUMP     Z,       curtsorUp
        COMP     decoded, $72
        JUMP     Z,       cursorDown
        COMP     decoded, $6B
        JUMP     Z,       cursorLeft
        COMP     decoded, $74
        JUMP     Z,       cursorRigth
        COMP     decoded, $7D
        JUMP     Z,       pageup
        COMP     decoded, $7A
        JUMP     Z,       pagedown

        JUMP     zero
escape:
        LOAD     s2,     1
        OUT      s2,     lcd
        CALL     handleE
        JUMP     zero
pshift:
        COMP     btn_rel, 1
        JUMP     NZ,      el
        LOAD     shift,   0
        JUMP     zero
        el:
        LOAD     shift,   1
        JUMP     zero
numLock:
        XOR      num,     1
        JUMP     zero
capsLock:
        XOR      caps,    1
        JUMP     zero
delete:
        ; TODO: implement
        JUMP     zero
backspace:
        ; TODO: implement
        JUMP     zero
enter:
        ; TODO: implement
        JUMP     cursorMoved
home:
        COMP     cursor,  16
        JUMP     NC,      hel
        CALL     fline
        JUMP     cursorMoved
        hel:
        CALL     secline
        JUMP     cursorMoved
pend:
        COMP     cursor,  16
        JUMP     NC,      eel
        CALL     secline
        JUMP     cursorMoved
        eel:
        CALL     fline
        JUMP     cursorMoved
cursorLeft:
        LOAD     s3,      4
        STORE    s3,      3
        CALL     code
        JUMP     cursorMoved
cursorRigth:
        LOAD     s3,      5
        STORE    s3,      3
        CALL     code
        JUMP     cursorMoved
curtsorUp:
        LOAD     s3,      2
        STORE    s3,      3
        CALL     code
        JUMP     pagedown
cursorDown:
        LOAD     s3,      3
        STORE    s3,      3
        CALL     code
pageup:
pagedown:
        COMP     cursor,  16
        JUMP     NC,      cel
        ADD      cursor,  16
        LOAD     s1,      $80
        JUMP     mvcur
        cel:
        SUB      cursor,  16
        LOAD     s1,      $C0
        CALL     fline
        mvcur:
        ADD      s1,      cursor
        OUT      s1,      lcd
cursorMoved:
        CALL     handleE
        CALL     delay40u
        JUMP     zero
btnReleased:
        LOAD     btn_rel, 0
        LOAD     special, 0
        COMP     shift,   1
        JUMP     NZ,      zero
        COMP     decoded, $59
        JUMP     Z,       bel
        COMP     decoded, $12
        JUMP     Z,      bel
        JUMP     zero
        bel:
        LOAD     shift,   0
        JUMP     zero
released:
        LOAD     btn_rel, 1
        JUMP     zero
ed:
        LOAD     s3,      0
        OUT      s3,      int_status
        RETI     ENABLE

upperCase:
        ; TODO: implement procedure
        ; if shift or caps flags are set but not both
        ; different handling for letters, numbers and special characters f. e. . -> >; ' -> "
        
        RET
        
code:
        ;TODO: implement code reading
        FETCH    s0,      0 ; code status
        FETCH    s1,      1 ; code counter
        FETCH    s2,      3 ; code argument
        
        COMP     s0,      1
        JUMP     Z,       nxt
        COMP     s2,      2
        JUMP     NZ,      cend
        LOAD     s1,      1
        STORE    s1,      1
        STORE    s1,      0
        JUMP     cend
        nxt: ; not first symbol
        COMP     s1,      1
        JUMP     NZ,      el1
        COMP     s2,      2
        JUMP     NZ,      bad
        JUMP     codeCont
        
        el1:
        COMP     s1,      2
        JUMP     NZ,      el2
        COMP     s2,      3
        JUMP     NZ,      bad
        JUMP     codeCont

        el2:
        COMP     s1,      3
        JUMP     NZ,      el3
        COMP     s2,      3
        JUMP     NZ,      bad
        JUMP     codeCont

        el3:
        COMP     s1,      4
        JUMP     NZ,      el4
        COMP     s2,      4
        JUMP     NZ,      bad
        JUMP     codeCont

        el4:
        COMP     s1,      5
        JUMP     NZ,      el5
        COMP     s2,      5
        JUMP     NZ,      bad
        JUMP     codeCont

        el5:
        COMP     s1,      6
        JUMP     NZ,      el6
        COMP     s2,      4
        JUMP     NZ,      bad
        JUMP     codeCont

        el6:
        COMP     s1,      7
        JUMP     NZ,      el7
        COMP     s2,      5
        JUMP     NZ,      bad
        JUMP     codeCont

        el7:
        COMP     s1,      8
        JUMP     NZ,      el8
        COMP     s2,      1
        JUMP     NZ,      bad
        JUMP     codeCont

        el8:
        COMP     s1,      9
        JUMP     NZ,      bad
        COMP     s2,      0
        JUMP     NZ,      bad
        CALL     codeDone
        JUMP     bad
        codeCont:
        ADD      s1,      1
        STORE    s1,      1
        JUMP     cend
        bad:
        LOAD     s1,      0
        STORE    s1,      1
        STORE    s1,      0
        cend:
        RET
        
codeDone:
        RET
        
ORG     $3FF
JUMP    handleInt
